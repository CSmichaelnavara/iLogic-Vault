<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Version>1</Version>
  <Snippets>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>iLogic Vault - Initialize</Name>
      <ToolTip>Adds the frame to connect and run Vault commands within rule</ToolTip>
      <Index>2002</Index>
      <Code>
        <![CDATA[	'enable iLogicVault commands and validate user's login state
	Dim iLogicVault As New QuickstartiLogicLibrary.QuickstartiLogicLib
	If iLogicVault.LoggedIn = False
		Logger.Error("Not Logged In to Vault! - Login first and repeat executing this rule.")
		Exit Sub
	End If
	
]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Vault File by FullFileName</Name>
      <ToolTip>iLogicVault.mGetFileByFullFileName( "$/Designs/&lt;your file name&gt;")</ToolTip>
      <Index>2003</Index>
      <Code>
        <![CDATA['Downloads Vault file Using full File Path, e.g. "$/Designs/Base.ipt". Returns full File name In local working folder (download enforces override, If local File exists),
'Preset Options: Download Children (recursively) = Enabled, Enforce Overwrite = True'
'Optionally check-out the file; preset: check-out = false
Dim mVaultFile As String = iLogicVault.GetFileByFullFilePath("$/") 'add ..., True) to enable check-out of downloaded file.
If mVaultFile Is Nothing Then
	Logger.Error("Vault file not found - Please double check that file exists in Vault.")
	ElseIf mVaultFile.Count > 0 Then
		''add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
		
End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Vault File by Search</Name>
      <ToolTip>Search Vault file using 1 to n property/value pairs; returns full local file name in working folder</ToolTip>
      <Index>2004</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result

	'returns full file name in local working folder (download enforces override, if local file exists)
	mVaultFile = iLogicVault.GetFileBySearchCriteria(mSearchParams, True, False)

	If mVaultFile Is Nothing Then
		Logger.Error("Vault file search: File not found - Please double check that file can be found with search criteria applied.")
	Else
		Logger.Info("File " & mVaultFile & " found by search and downloaded to local workspace.")
		'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check Vault File(s) Exist by Search</Name>
      <ToolTip>Search Vault files using 1 to n property/value pairs; returns list of file names and shares logger info</ToolTip>
      <Index>2008</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
mSearchParams.Add("Part Number", "001003")		'applies to file 001003.ipt
mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
'...add as many as required to enable a unique search result

Dim mVaultFiles As List(Of String)
mVaultFiles = iLogicVault.CheckFilesExistBySearchCriteria(mSearchParams, False) 'returns file name(s)
If mVaultFiles Is Nothing Then
	Logger.Error("The file(s) searched was(were) not found. Please double check that the search criteria's relevance.") 
ElseIf mVaultFiles.Count > 0 Then
	Dim mFileList As String
	For Each mFile As String In mVaultFiles
		mFileList += mFile & vbCr
	Next
	Logger.Info("iLogic-Vault file search found: " & mFileList)
End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check In Active Document</Name>
      <ToolTip>Save and check in active document; Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for 'Check In' command.</ToolTip>
      <Index>2005</Index>
      <Code>
        <![CDATA[	Try
		ThisDoc.Save
		Dim oControlDef As Inventor.ControlDefinition
		oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item("VaultCheckinTop")
		oControlDef.Execute2(True)
	Catch ex As Exception
		Logger.Error("Undo Check-In failed; likely, the file wasn't checked out.")
	End Try]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Check Out Active Document</Name>
      <ToolTip>check out active document.Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for 'Check out' command.</ToolTip>
      <Index>2006</Index>
      <Code>
        <![CDATA[ThisDoc.Save
Dim oControlDef As Inventor.ControlDefinition = ThisApplication.CommandManager.ControlDefinitions.Item("VaultCheckoutTop")
oControlDef.Execute2(True) 'synchroneous execution; wait for the commands ending before rule exits]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Undo Check Out Active Document</Name>
      <ToolTip>Undo Check Out of active document. Note - requires active Vault connection (Snippet iLogic Vault Connection). Calls UI command and may require user interaction, if dialog suppression is activated for Undo Check Out command. Pending changes may be skipped; use ThisDoc.Document.Dirty to query its state.</ToolTip>
      <Index>2007</Index>
      <Code>
        <![CDATA[Dim oControlDef As Inventor.ControlDefinition
oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item("VaultUndoCheckoutTop")
oControlDef.Execute2(True) 'synchroneous execution; wait for the commands ending before rule exits]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File Using Vault Numbering</Name>
      <ToolTip>Copy file (given Vault path) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2009</Index>
      <Code>
        <![CDATA[	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	'returns "FileNotFound if file does not exist at indicated location
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileNameAndAutoNumber("$/Designs/Inventor Sample Data/Fishing Rod Model/001012.ipt", mNumSchmName, , False) 'optionally add the mNumInput variable; note - the check-out flag is an option also; default = True.
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; check that the file can get found first." )
	Else
		Logger.Info("File " & mVaultFile & " created As copy.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File Using Individual New File Name</Name>
      <ToolTip>Copy file (given Vault path) using new name driven by rule. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2010</Index>
      <Code>
        <![CDATA['set new file name according your requirements. Use snippet includin auto-numbering if no individual file name applies.
	Dim mNewFileName As String = System.Guid.NewGuid.ToString() 'replace unique ID by your naming configuration, e.g. sequence of f(x) key parameter values
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	'returns "FileNotFound if file does not exist at indicated location
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileNameAndNewName("$/Designs/Inventor Sample Data/Fishing Rod Model/001012.ipt", mNewFileName, False) 'optionally add the mNumInput variable; note - new file name must not contain an extension! The check-out option is True as default; set to False or remove.
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; validate source file can be found and new file name." )
	Else
		Logger.Info("File " & mVaultFile & " created As copy.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File (Searched) Using Vault Numbering</Name>
      <ToolTip>Copy file (found by search) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2011</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result
	
	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileSearchAndAutoNumber(mSearchParams, mNumSchmName, True, , False) 'the default for optional parameter MatchAllCriteria = false, CheckOut = true, and search in all folders starting from root $/
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; verify that the file can be found by the search criteria applied. Also verify your input of numbering sheme name and optional parameters")
	Else
		Logger.Info("File " & mVaultFile & " created As New copy Of search result.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Vault File (Searched) Using Individual New File Name</Name>
      <ToolTip>Copy file (given Vault path) applying numbering scheme. Returns full local file name of downloaded file, optionally check-out</ToolTip>
      <Index>2012</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
		Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
		mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
		mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
		'...add as many as required to enable a unique search result
	
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String)
	
	'returns full file name in local working folder (download enforces override, if local file exists)
	Dim mNewFileName As String = System.Guid.NewGuid.ToString() 'replace unique ID by your naming configuration, e.g. sequence of f(x) key parameter values
	Dim mVaultFile As String = iLogicVault.GetFileCopyBySourceFileSearchAndNewName(mSearchParams, mNewFileName, True, True)  'the default for optional parameter MatchAllCriteria = false, CheckOut = true 
	If mVaultFile Is Nothing Then
		Logger.Error("File copy not created; check that the source file can get found by the search criteria applied.")
	Else
		Logger.Info("File " & mVaultFile & " created As New copy Of search result.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mVaultFile, True)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get New Vault File Number and copy file to it</Name>
      <ToolTip>Create single file number by scheme name (or Default). Copy current local file to it.</ToolTip>
      <Index>2013</Index>
      <Code>
        <![CDATA[	'Set the name of the numbering scheme or use 'Default' to use the pre-set scheme
	Dim mNumSchmName As String = "Default"
	'Optionally collect input values for file the selected numbering scheme; use the order of the fields as configured in the scheme;
	Dim mNumInput As New System.Collections.Generic.List(Of String) 'add UDP.DisplayName, Value Pairs

	'Create single file number by scheme name and optional input parameters; returns new number or error message "GetNumberFailed"
	Dim mFileNumber As String = iLogicVault.GetNewNumber(mNumSchmName) 'optionally add the mNumInput variable adding ...", mNumInput)
	If mFileNumber Is Nothing Then
		Logger.Error("Number generation failed; check name (if not 'Default') or input parameters if required.")
	Else
		Logger.Info("File Number " & mFileNumber & " created and ready for consumption.")
			'add next action using the downloaded file here, e.g. Component.Replace("Part1:1", mLocalFileCopy, True)
		Dim mFullFileName As String = ThisDoc.Document.FullFileName
        'ThisDoc.Document.SaveAs(mFileNumber, True)
		Dim mLocaFileCopy As String = iLogicVault.CopyLocalFile(mFullFileName, mFileNumber)
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Copy Local File</Name>
      <ToolTip>Copy current file to new name; combine snippet 'Get New...Number' or create new file name by rule. The source file's location and extension are captured and apply to the copy. Use Check-In snippet to add the new file to Vault.</ToolTip>
      <Index>2014</Index>
      <Code>
        <![CDATA[	'Retrieve file name to copy
	Dim mFullFileName As String = ThisDoc.Document.FullFileName
	'Call file copy The source file's location and extension are captured and apply to the copy. Returns local path/filename or error statement "LocalFileCopyFailed"
	Dim mLocaFileCopy As String = iLogicVault.mCopyLocalFile(mFullFileName, mFileNumber)]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Multiple Vault Files (Searched)</Name>
      <ToolTip>Search 1 to many files and download all; optionally check-out.</ToolTip>
      <Index>2015</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria;
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "00100*")		'applies to files from 001000 to 001009
	'...add as many as required to enable a unique search result
	
	'the list of downloaded files
	Dim mVaultFiles As List(Of String)
	'returns full file names in local working folder (download enforces override, if local file exists)
	'returns null (nothing) if no files return		
	mVaultFiles = iLogicVault.GetFilesBySearchCriteria(mSearchParams, False, False)  'the default for optional parameter MatchAllCriteria = false, CheckOut = true, searching all folders
	'prepare output
	If mVaultFiles.Count = 0 Then
		Logger.Error("The file searched was not found. Please double check that files can be found with search criteria applied.")
	ElseIf mVaultFiles.Count > 0 Then
		Dim mFileList As String
		For Each mFile As String In mVaultFiles
			mFileList += mFile & vbCr
		Next
		Logger.Info("iLogic-Vault file search found: " & mFileList)
		'so the files are there, do what ever you need to do consuming these...
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Search</Name>
      <ToolTip>Searches a file to extract the thumbnail as System.Drawing.Image</ToolTip>
      <Index>2017</Index>
      <Code>
        <![CDATA[	'Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result
	
	Dim mImage As System.Drawing.Image = iLogicVault.GetThumbnailImageBySearchCriteria(mSearchParams, True)
	If mImage Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''..as of today, the consumption of Image objects is for custom dialogs (dll) only...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Full File Path</Name>
      <ToolTip>Extracts source file's thumbnail as System.Drawing.Image object</ToolTip>
      <Index>2018</Index>
      <Code>
        <![CDATA[Dim mImage As System.Drawing.Image = iLogicVault.GetThumbnailImageByFullSourceFilePath("$/Designs/Inventor Sample Data/Fishing Rod Model/001002.ipt", 254, 254)
	If mImage Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''..as of today, the consumption of Image objects is for custom dialogs (dll) only...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Search as Image file</Name>
      <ToolTip>Searches for a source file to extract the thumbnail of and downloads it as JPG file</ToolTip>
      <Index>2019</Index>
      <Code>
        <![CDATA['Build one to many name/value pairs of Property/Value as search criteria
	Dim mSearchParams As New System.Collections.Generic.Dictionary(Of String, String) 'add UDP.DisplayName, Value Pairs
	mSearchParams.Add("Part Number", "001002")	'applies to file 001002.ipt
	mSearchParams.Add("Title", "Back Side Cover") 	'applies to file 001002.ipt and to file 001068.iam
	'...add as many as required to enable a unique search result
	
	Dim mImageFile As String = iLogicVault.GetThumbnailFileBySearchCriteria(mSearchParams, True)
	If mImageFile Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''add next action using the downloaded file here...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicVault</Category>
      <Name>Get Thumbnail from Vault by Full File Path as Image file</Name>
      <ToolTip>Extracts thumbnail from source file and downloads it as JPG file</ToolTip>
      <Index>2020</Index>
      <Code>
        <![CDATA[	Dim mImageFile As String = iLogicVault.GetThumbnailFileByFullSourceFilePath("$/Designs/Inventor Sample Data/Fishing Rod Model/001002.ipt", 254, 254)
	If mImageFile Is Nothing Then
		Logger.Error("Could not convert thumbnail to image file - Please double check that file exists in Vault including a thumbnail.")
	Else
			''add next action using the downloaded file here...
			
	End If]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicPDM</Category>
      <Name>Is ThisDoc a Library File (Boolean)</Name>
      <ToolTip>
        Check that current file neither is Content Center nor User Library file.
        Note - Requires function "mCheckLibraries" (also member of this snippet library)
      </ToolTip>
      <Index>4001</Index>
      <Code><![CDATA[If mCheckLibraries  = True Then Exit Sub 'the rule can't add properties/values to content center or library files]]></Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicPDM</Category>
      <Name>Function mCheckLibraries (Is ThisDoc a Library File)</Name>
      <ToolTip>
        Function to validate that current file is not a Content Center or User Library file.
      </ToolTip>
      <Index>4002</Index>
      <Code>
        <![CDATA['function to validate that current file is not a Content Center or user Library file
Function mCheckLibraries() As Boolean
	
	Dim mDirInfo As System.IO.DirectoryInfo
	Dim mLibPath As Inventor.ProjectPath
	Dim mTmpPath As String
	Dim mCCPath As String 
	Dim mIPJ As Inventor.DesignProject
	Dim mIpjPath As String
	
	If (ThisDoc.Document.FileSaveCounter <> 0) Then
		Try
			mCCPath = ThisApplication.DesignProjectManager.ActiveDesignProject.ContentCenterPath
			mIPJ = ThisApplication.DesignProjectManager.ActiveDesignProject
			mIpjPath = mIPJ.FullFileName
			mFileInfo = New System.IO.FileInfo(ThisDoc.Document.FullFileName)
			If InStr(mFileInfo.FullName, mCCPath.ToString) Then Return True
			For Each mLibPath In mIPJ.LibraryPaths
			    'check relative/absolute paths
			    If mLibPath.Path.StartsWith(".\") Then
			        mDirInfo = New System.IO.DirectoryInfo(mIPJ.FullFileName)
			        mTmpPath = mDirInfo.Root.ToString & mDirInfo.Parent.ToString & mLibPath.Path.ToString.Replace(".\", "\")
			    End If
			    If mFileInfo.FullName.StartsWith(mTmpPath) Then Return True
			Next
		Catch
			Logger.Error("Error in Function mCheckLibraries.")
		End Try
	Else
		Logger.Info("File is not saved yet; readonly check skipped.")
	End If
End Function]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicPDM</Category>
      <Name>Is ThisDoc write protected (Boolean)</Name>
      <ToolTip>
        Call the function mFileReadOnly to validate write protection.
        Note - Requires function mFileReadOnly (part of this snippet library)
      </ToolTip>
      <Index>4003</Index>
      <Code><![CDATA[If mFileReadOnly = True Then Exit Sub 'the rule can't apply changes if the file is write protected]]></Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicPDM</Category>
      <Name>Function mFileReadOnly (Is ThisDoc write protected?)</Name>
      <ToolTip>Function to validate that the current file is editable.</ToolTip>
      <Index>4004</Index>
      <Code>
        <![CDATA['Function to validate that the current file is editable.
Function mFileReadOnly As Boolean
	Dim mFileInfo As System.IO.FileInfo
	'for new document, not saved yet the readonly check is not required
	If (ThisDoc.Document.FileSaveCounter <> 0) Then
	mFileInfo = New System.IO.FileInfo(ThisDoc.Document.FullFileName)	
		Logger.Info(mFileInfo.DirectoryName)
		If mFileInfo.IsReadOnly = False Then
			Logger.Info("File " & ThisDoc.FileName & "  is Write Enabled")
			Return False
		Else
			Logger.Warn("File " & ThisDoc.FileName & " is ReadOnly; rule " & " stops execution.")
			Return True
		End If
	End If
	Logger.Info("File is not saved yet; readonly check skipped.")
End Function]]>
      </Code>
    </CodeSnippet>
    <CodeSnippet>
      <Category>iLogicPDM</Category>
      <Name>GetAllDocumentSubTypes</Name>
      <ToolTip>
        Select Case definitions for document types and document sub-types.
        Likely just a sub set of all is required but it is easier to comment/delete the unneeded ones.
      </ToolTip>
      <Index>4005</Index>
      <Code>
        <![CDATA[Sub Main
	'access the active document
  	Dim oDoc As Document = ThisApplication.ActiveDocument
  	'get the document type
	Dim eDocumentType As Inventor.DocumentTypeEnum = oDoc.DocumentType
	Dim sDocumentType As String = "Unknown"

	Select Case eDocumentType
    	Case DocumentTypeEnum.kAssemblyDocumentObject
      		sDocumentType = "Assembly Document"
    	Case DocumentTypeEnum.kDesignElementDocumentObject
      		sDocumentType = "DesignElement Document"
    	Case DocumentTypeEnum.kDrawingDocumentObject
				sDocumentType = "Drawing Document"
		Case DocumentTypeEnum.kForeignModelDocumentObject
      		sDocumentType = "ForeignModel Document"
    	Case DocumentTypeEnum.kPartDocumentObject
      		sDocumentType = "Part Document"
    	Case DocumentTypeEnum.kPresentationDocumentObject
      		sDocumentType = "Presentation Document"
    	Case DocumentTypeEnum.kSATFileDocumentObject
      		sDocumentType = "SATFile Document"
    	Case DocumentTypeEnum.kUnknownDocumentObject
      		sDocumentType = "Unknown Document"
	End Select
	
	'get the document sub-type
	Dim sDocumentSubType As String = oDoc.SubType
  	Dim sReadableType As String = "Unknown"

  	'part document sub-types
  	'part
  	Select Case sDocumentSubType
		Case "{4D29B490-49B2-11D0-93C3-7E0706000000}"
      		sReadableType = "Part"
      'sheet metal
	    Case "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}"
			sReadableType = "sheet metal"
      'generic proxy
    	Case "{92055419-B3FA-11D3-A479-00C04F6B9531}"
			sReadableType = "generic proxy"
      'compatibility proxy
    	Case "{9C464204-9BAE-11D3-8BAD-0060B0CE6BB4}"
      		sReadableType = "compatibility proxy"
      'catalog proxy
    	Case "{9C88D3AF-C3EB-11D3-B79E-0060B0F159EF}"
      		sReadableType = "catalog proxy"
 		
		'assembly document sub-types
    	Case "{E60F81E1-49B3-11D0-93C3-7E0706000000}"
      		sReadableType = "assembly"
		Case "{28EC8354-9024-440F-A8A2-0E0E55D635B0}"
 			sReadableType = "weldment"
			
	  'drawing document sub-types
    	Case "{BBF9FDF1-52DC-11D0-8C04-0800090BE8EC}"
      		sReadableType = "drawing"
			
 
      'design element document sub-types
		Case "{62FBB030-24C7-11D3-B78D-0060B0F159EF}"
			sReadableType = "design element"

      'presentation document sub-types
    	Case "{76283A80-50DD-11D3-A7E3-00C04F79D7BC}"
			sReadableType = "presentation"

  	End Select
Logger.Info("Document-Type: " + sDocumentType) 
Logger.Info( "Sub-Type: " + sReadableType)

End Sub]]>
      </Code>
    </CodeSnippet>
  </Snippets>
</CodeSnippets>